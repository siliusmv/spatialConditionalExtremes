% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inla-mesh.R
\name{create_mesh}
\alias{create_mesh}
\title{This function is a wrapper around INLA::inla.mesh.2d().
For some input combinations to inla.mesh.2d(), the function will never
manage to create a triangulated mesh, and will instead contnue running indefinitely,
meaning that the function must be actively stopped by the user.
The function create_mesh() ensures that this does not happen by automatically
killing the subprocess started by inla.mesh.2d() and returning NULL after
a certain time has passed.
NB: Even though the subprocess started by inla.mesh.2d() is killed, the subprocesses
that are again started by this subprocess are not killed. This must be performed
manually by the user, by, e.g., calling \code{system("pkill fmesher")}, if you are
working on a *nix system.
create_mesh() has two arguments:
\itemize{
\item args is a names list of arguments to use in the function inla.mesh.2d()
\item timeout is the time, in seconds, to wait before killing the subprocess started by
inla.mesh.2d()
}}
\usage{
create_mesh(args, timeout = 5)
}
\description{
This function is a wrapper around INLA::inla.mesh.2d().
For some input combinations to inla.mesh.2d(), the function will never
manage to create a triangulated mesh, and will instead contnue running indefinitely,
meaning that the function must be actively stopped by the user.
The function create_mesh() ensures that this does not happen by automatically
killing the subprocess started by inla.mesh.2d() and returning NULL after
a certain time has passed.
NB: Even though the subprocess started by inla.mesh.2d() is killed, the subprocesses
that are again started by this subprocess are not killed. This must be performed
manually by the user, by, e.g., calling \code{system("pkill fmesher")}, if you are
working on a *nix system.
create_mesh() has two arguments:
\itemize{
\item args is a names list of arguments to use in the function inla.mesh.2d()
\item timeout is the time, in seconds, to wait before killing the subprocess started by
inla.mesh.2d()
}
}
